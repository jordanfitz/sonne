/**
This header gets auto-generated by the CMake prebuild step for creating a default configuration.

Do not edit this file by hand! If you want to change the default config, edit the `default_config.json` file.
*/

#include "sonne/pch.hpp"

#include "sonne/config_generator.hpp"
#include "sonne/config.hpp"

using namespace Sonne;

std::shared_ptr<Config> Sonne::GenerateDefaultConfig()
{
    std::shared_ptr<Config> config = std::make_shared<Config>();

    config->SetIgnoreHidden(true);
    config->SetColumns(80);

    std::shared_ptr<Language> CCSource = std::make_shared<Language>();

    CCSource->name = "C/C++ Source";
    CCSource->extensions = {
        "c",
        "cpp",
        "cxx",
        "cc"
    };

    CCSource->lineComment = "//";
    CCSource->blockCommentBegin = "/*";
    CCSource->blockCommentEnd = "*/";
    CCSource->stringDelimiters = {
        "\""
    };

    config->AddLanguage(CCSource);

    std::shared_ptr<Language> CCHeader = std::make_shared<Language>();

    CCHeader->name = "C/C++ Header";
    CCHeader->extensions = {
        "h",
        "hpp",
        "hxx",
        "hh"
    };

    CCHeader->lineComment = "//";
    CCHeader->blockCommentBegin = "/*";
    CCHeader->blockCommentEnd = "*/";
    CCHeader->stringDelimiters = {
        "\""
    };

    config->AddLanguage(CCHeader);

    std::shared_ptr<Language> Python = std::make_shared<Language>();

    Python->name = "Python";
    Python->extensions = {
        "py"
    };

    Python->lineComment = "#";
    Python->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(Python);

    std::shared_ptr<Language> Java = std::make_shared<Language>();

    Java->name = "Java";
    Java->extensions = {
        "java"
    };

    Java->lineComment = "//";
    Java->blockCommentBegin = "/*";
    Java->blockCommentEnd = "*/";
    Java->stringDelimiters = {
        "\""
    };

    config->AddLanguage(Java);

    std::shared_ptr<Language> Kotlin = std::make_shared<Language>();

    Kotlin->name = "Kotlin";
    Kotlin->extensions = {
        "kt",
        "kts"
    };

    Kotlin->lineComment = "//";
    Kotlin->blockCommentBegin = "/*";
    Kotlin->blockCommentEnd = "*/";
    Kotlin->stringDelimiters = {
        "\""
    };

    config->AddLanguage(Kotlin);

    std::shared_ptr<Language> Rust = std::make_shared<Language>();

    Rust->name = "Rust";
    Rust->extensions = {
        "rs"
    };

    Rust->lineComment = "//";
    Rust->blockCommentBegin = "/*";
    Rust->blockCommentEnd = "*/";
    Rust->stringDelimiters = {
        "\""
    };

    config->AddLanguage(Rust);

    std::shared_ptr<Language> JavaScript = std::make_shared<Language>();

    JavaScript->name = "JavaScript";
    JavaScript->extensions = {
        "js"
    };

    JavaScript->lineComment = "//";
    JavaScript->blockCommentBegin = "/*";
    JavaScript->blockCommentEnd = "*/";
    JavaScript->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(JavaScript);

    std::shared_ptr<Language> CSS = std::make_shared<Language>();

    CSS->name = "CSS";
    CSS->extensions = {
        "css"
    };

    CSS->blockCommentBegin = "/*";
    CSS->blockCommentEnd = "*/";

    config->AddLanguage(CSS);

    std::shared_ptr<Language> HTML = std::make_shared<Language>();

    HTML->name = "HTML";
    HTML->extensions = {
        "html",
        "htm",
        "xhtml"
    };

    HTML->blockCommentBegin = "<!--";
    HTML->blockCommentEnd = "-->";

    config->AddLanguage(HTML);

    std::shared_ptr<Language> TypeScript = std::make_shared<Language>();

    TypeScript->name = "TypeScript";
    TypeScript->extensions = {
        "ts",
        "tsx"
    };

    TypeScript->lineComment = "//";
    TypeScript->blockCommentBegin = "/*";
    TypeScript->blockCommentEnd = "*/";
    TypeScript->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(TypeScript);

    std::shared_ptr<Language> Ruby = std::make_shared<Language>();

    Ruby->name = "Ruby";
    Ruby->extensions = {
        "rb"
    };

    Ruby->lineComment = "#";
    Ruby->stringDelimiters = {
        "\""
    };

    config->AddLanguage(Ruby);

    std::shared_ptr<Language> Lua = std::make_shared<Language>();

    Lua->name = "Lua";
    Lua->extensions = {
        "lua"
    };

    Lua->lineComment = "--";
    Lua->blockCommentBegin = "--[[";
    Lua->blockCommentEnd = "--]]";
    Lua->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(Lua);

    std::shared_ptr<Language> D = std::make_shared<Language>();

    D->name = "D";
    D->extensions = {
        "d"
    };

    D->lineComment = "//";
    D->blockCommentBegin = "/*";
    D->blockCommentEnd = "*/";
    D->stringDelimiters = {
        "\""
    };

    config->AddLanguage(D);

    std::shared_ptr<Language> C = std::make_shared<Language>();

    C->name = "C#";
    C->extensions = {
        "cs"
    };

    C->lineComment = "//";
    C->blockCommentBegin = "/*";
    C->blockCommentEnd = "*/";
    C->stringDelimiters = {
        "\""
    };

    config->AddLanguage(C);

    std::shared_ptr<Language> PHP = std::make_shared<Language>();

    PHP->name = "PHP";
    PHP->extensions = {
        "php",
        "php3",
        "php4",
        "php5"
    };

    PHP->lineComment = "//";
    PHP->blockCommentBegin = "/*";
    PHP->blockCommentEnd = "*/";
    PHP->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(PHP);

    std::shared_ptr<Language> JSON = std::make_shared<Language>();

    JSON->name = "JSON";
    JSON->extensions = {
        "php",
        "php3",
        "php4",
        "php5"
    };


    config->AddLanguage(JSON);

    std::shared_ptr<Language> Go = std::make_shared<Language>();

    Go->name = "Go";
    Go->extensions = {
        "go"
    };

    Go->lineComment = "//";
    Go->blockCommentBegin = "/*";
    Go->blockCommentEnd = "*/";
    Go->stringDelimiters = {
        "\""
    };

    config->AddLanguage(Go);

    std::shared_ptr<Language> Swift = std::make_shared<Language>();

    Swift->name = "Swift";
    Swift->extensions = {
        "swift"
    };

    Swift->lineComment = "//";
    Swift->blockCommentBegin = "/*";
    Swift->blockCommentEnd = "*/";
    Swift->stringDelimiters = {
        "\""
    };

    config->AddLanguage(Swift);

    std::shared_ptr<Language> ObjectiveC = std::make_shared<Language>();

    ObjectiveC->name = "Objective-C";
    ObjectiveC->extensions = {
        "h",
        "m",
        "mm"
    };

    ObjectiveC->lineComment = "//";
    ObjectiveC->blockCommentBegin = "/*";
    ObjectiveC->blockCommentEnd = "*/";
    ObjectiveC->stringDelimiters = {
        "\""
    };

    config->AddLanguage(ObjectiveC);

    std::shared_ptr<Language> YAML = std::make_shared<Language>();

    YAML->name = "YAML";
    YAML->extensions = {
        "yml",
        "yaml"
    };

    YAML->lineComment = "#";
    YAML->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(YAML);

    std::shared_ptr<Language> INI = std::make_shared<Language>();

    INI->name = "INI";
    INI->extensions = {
        "ini"
    };

    INI->lineComment = ";";

    config->AddLanguage(INI);

    std::shared_ptr<Language> PlainText = std::make_shared<Language>();

    PlainText->name = "Plain Text";
    PlainText->extensions = {
        "txt",
        "text"
    };


    config->AddLanguage(PlainText);

    std::shared_ptr<Language> XML = std::make_shared<Language>();

    XML->name = "XML";
    XML->extensions = {
        "xml"
    };

    XML->blockCommentBegin = "<!--";
    XML->blockCommentEnd = "-->";

    config->AddLanguage(XML);

    return config;
}