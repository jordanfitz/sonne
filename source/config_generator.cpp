/**
This header gets auto-generated by the CMake prebuild step for creating a default configuration.

Do not edit this file by hand! If you want to change the default config, edit the `default_config.json` file.
*/

#include "computare/pch.hpp"

#include "computare/config_generator.hpp"
#include "computare/config.hpp"

using namespace Computare;

std::shared_ptr<Config> Computare::GenerateDefaultConfig()
{
    std::shared_ptr<Config> config = std::make_shared<Config>();

    config->SetIgnoreHidden(true);
    config->SetBlockSize(131072);

    std::shared_ptr<Language> LZGkRkkoyJzZbERk = std::make_shared<Language>();

    LZGkRkkoyJzZbERk->name = "C/C++ Source";
    LZGkRkkoyJzZbERk->extensions = {
        "c",
        "cpp",
        "cxx",
        "cc"
    };

    LZGkRkkoyJzZbERk->lineComment = "//";
    LZGkRkkoyJzZbERk->blockCommentBegin = "/*";
    LZGkRkkoyJzZbERk->blockCommentEnd = "*/";
    LZGkRkkoyJzZbERk->stringDelimiters = {
        "\""
    };

    config->AddLanguage(LZGkRkkoyJzZbERk);

    std::shared_ptr<Language> hGgCCSWbgOgTHBPh = std::make_shared<Language>();

    hGgCCSWbgOgTHBPh->name = "C/C++ Header";
    hGgCCSWbgOgTHBPh->extensions = {
        "h",
        "hpp",
        "hxx",
        "hh"
    };

    hGgCCSWbgOgTHBPh->lineComment = "//";
    hGgCCSWbgOgTHBPh->blockCommentBegin = "/*";
    hGgCCSWbgOgTHBPh->blockCommentEnd = "*/";
    hGgCCSWbgOgTHBPh->stringDelimiters = {
        "\""
    };

    config->AddLanguage(hGgCCSWbgOgTHBPh);

    std::shared_ptr<Language> rxAvOPfMAykxmClo = std::make_shared<Language>();

    rxAvOPfMAykxmClo->name = "Python";
    rxAvOPfMAykxmClo->extensions = {
        "py"
    };

    rxAvOPfMAykxmClo->lineComment = "#";
    rxAvOPfMAykxmClo->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(rxAvOPfMAykxmClo);

    std::shared_ptr<Language> frbjKrHynnngxHJu = std::make_shared<Language>();

    frbjKrHynnngxHJu->name = "Java";
    frbjKrHynnngxHJu->extensions = {
        "java"
    };

    frbjKrHynnngxHJu->lineComment = "//";
    frbjKrHynnngxHJu->blockCommentBegin = "/*";
    frbjKrHynnngxHJu->blockCommentEnd = "*/";
    frbjKrHynnngxHJu->stringDelimiters = {
        "\""
    };

    config->AddLanguage(frbjKrHynnngxHJu);

    std::shared_ptr<Language> MwHIisXFDHiUOoZk = std::make_shared<Language>();

    MwHIisXFDHiUOoZk->name = "Kotlin";
    MwHIisXFDHiUOoZk->extensions = {
        "kt",
        "kts"
    };

    MwHIisXFDHiUOoZk->lineComment = "//";
    MwHIisXFDHiUOoZk->blockCommentBegin = "/*";
    MwHIisXFDHiUOoZk->blockCommentEnd = "*/";
    MwHIisXFDHiUOoZk->stringDelimiters = {
        "\""
    };

    config->AddLanguage(MwHIisXFDHiUOoZk);

    std::shared_ptr<Language> PllcwnoKcZwYAgXM = std::make_shared<Language>();

    PllcwnoKcZwYAgXM->name = "Rust";
    PllcwnoKcZwYAgXM->extensions = {
        "rs"
    };

    PllcwnoKcZwYAgXM->lineComment = "//";
    PllcwnoKcZwYAgXM->blockCommentBegin = "/*";
    PllcwnoKcZwYAgXM->blockCommentEnd = "*/";
    PllcwnoKcZwYAgXM->stringDelimiters = {
        "\""
    };

    config->AddLanguage(PllcwnoKcZwYAgXM);

    std::shared_ptr<Language> zuVFKNngsIafNqmJ = std::make_shared<Language>();

    zuVFKNngsIafNqmJ->name = "JavaScript";
    zuVFKNngsIafNqmJ->extensions = {
        "js"
    };

    zuVFKNngsIafNqmJ->lineComment = "//";
    zuVFKNngsIafNqmJ->blockCommentBegin = "/*";
    zuVFKNngsIafNqmJ->blockCommentEnd = "*/";
    zuVFKNngsIafNqmJ->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(zuVFKNngsIafNqmJ);

    std::shared_ptr<Language> DykcyFLmwBMoIrhV = std::make_shared<Language>();

    DykcyFLmwBMoIrhV->name = "CSS";
    DykcyFLmwBMoIrhV->extensions = {
        "css"
    };

    DykcyFLmwBMoIrhV->blockCommentBegin = "/*";
    DykcyFLmwBMoIrhV->blockCommentEnd = "*/";

    config->AddLanguage(DykcyFLmwBMoIrhV);

    std::shared_ptr<Language> yTiRHAIXLQyRFzmm = std::make_shared<Language>();

    yTiRHAIXLQyRFzmm->name = "HTML";
    yTiRHAIXLQyRFzmm->extensions = {
        "html",
        "htm",
        "xhtml"
    };

    yTiRHAIXLQyRFzmm->blockCommentBegin = "<!--";
    yTiRHAIXLQyRFzmm->blockCommentEnd = "-->";

    config->AddLanguage(yTiRHAIXLQyRFzmm);

    std::shared_ptr<Language> fqkvyrIQecwPVujF = std::make_shared<Language>();

    fqkvyrIQecwPVujF->name = "TypeScript";
    fqkvyrIQecwPVujF->extensions = {
        "ts",
        "tsx"
    };

    fqkvyrIQecwPVujF->lineComment = "//";
    fqkvyrIQecwPVujF->blockCommentBegin = "/*";
    fqkvyrIQecwPVujF->blockCommentEnd = "*/";
    fqkvyrIQecwPVujF->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(fqkvyrIQecwPVujF);

    std::shared_ptr<Language> LmCFGZyONPFzPlmO = std::make_shared<Language>();

    LmCFGZyONPFzPlmO->name = "Ruby";
    LmCFGZyONPFzPlmO->extensions = {
        "rb"
    };

    LmCFGZyONPFzPlmO->lineComment = "#";
    LmCFGZyONPFzPlmO->stringDelimiters = {
        "\""
    };

    config->AddLanguage(LmCFGZyONPFzPlmO);

    std::shared_ptr<Language> NmITtaRopoOSCEEQ = std::make_shared<Language>();

    NmITtaRopoOSCEEQ->name = "Lua";
    NmITtaRopoOSCEEQ->extensions = {
        "lua"
    };

    NmITtaRopoOSCEEQ->lineComment = "--";
    NmITtaRopoOSCEEQ->blockCommentBegin = "--[[";
    NmITtaRopoOSCEEQ->blockCommentEnd = "--]]";
    NmITtaRopoOSCEEQ->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(NmITtaRopoOSCEEQ);

    std::shared_ptr<Language> yRhsmmXRQQbXElFE = std::make_shared<Language>();

    yRhsmmXRQQbXElFE->name = "D";
    yRhsmmXRQQbXElFE->extensions = {
        "d"
    };

    yRhsmmXRQQbXElFE->lineComment = "//";
    yRhsmmXRQQbXElFE->blockCommentBegin = "/*";
    yRhsmmXRQQbXElFE->blockCommentEnd = "*/";
    yRhsmmXRQQbXElFE->stringDelimiters = {
        "\""
    };

    config->AddLanguage(yRhsmmXRQQbXElFE);

    std::shared_ptr<Language> XDgXsZBhxLhRuvhp = std::make_shared<Language>();

    XDgXsZBhxLhRuvhp->name = "C#";
    XDgXsZBhxLhRuvhp->extensions = {
        "cs"
    };

    XDgXsZBhxLhRuvhp->lineComment = "//";
    XDgXsZBhxLhRuvhp->blockCommentBegin = "/*";
    XDgXsZBhxLhRuvhp->blockCommentEnd = "*/";
    XDgXsZBhxLhRuvhp->stringDelimiters = {
        "\""
    };

    config->AddLanguage(XDgXsZBhxLhRuvhp);

    std::shared_ptr<Language> fAutOVtxEIMghDxV = std::make_shared<Language>();

    fAutOVtxEIMghDxV->name = "PHP";
    fAutOVtxEIMghDxV->extensions = {
        "php",
        "php3",
        "php4",
        "php5"
    };

    fAutOVtxEIMghDxV->lineComment = "//";
    fAutOVtxEIMghDxV->blockCommentBegin = "/*";
    fAutOVtxEIMghDxV->blockCommentEnd = "*/";
    fAutOVtxEIMghDxV->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(fAutOVtxEIMghDxV);

    std::shared_ptr<Language> iIyjnxANVOWEOvxy = std::make_shared<Language>();

    iIyjnxANVOWEOvxy->name = "JSON";
    iIyjnxANVOWEOvxy->extensions = {
        "php",
        "php3",
        "php4",
        "php5"
    };


    config->AddLanguage(iIyjnxANVOWEOvxy);

    std::shared_ptr<Language> aRDiXhrCglDndjsg = std::make_shared<Language>();

    aRDiXhrCglDndjsg->name = "Go";
    aRDiXhrCglDndjsg->extensions = {
        "go"
    };

    aRDiXhrCglDndjsg->lineComment = "//";
    aRDiXhrCglDndjsg->blockCommentBegin = "/*";
    aRDiXhrCglDndjsg->blockCommentEnd = "*/";
    aRDiXhrCglDndjsg->stringDelimiters = {
        "\""
    };

    config->AddLanguage(aRDiXhrCglDndjsg);

    std::shared_ptr<Language> qeMxzXbhjZTnGYtS = std::make_shared<Language>();

    qeMxzXbhjZTnGYtS->name = "Swift";
    qeMxzXbhjZTnGYtS->extensions = {
        "swift"
    };

    qeMxzXbhjZTnGYtS->lineComment = "//";
    qeMxzXbhjZTnGYtS->blockCommentBegin = "/*";
    qeMxzXbhjZTnGYtS->blockCommentEnd = "*/";
    qeMxzXbhjZTnGYtS->stringDelimiters = {
        "\""
    };

    config->AddLanguage(qeMxzXbhjZTnGYtS);

    std::shared_ptr<Language> lXTrCLSMfmnlRvik = std::make_shared<Language>();

    lXTrCLSMfmnlRvik->name = "Objective-C";
    lXTrCLSMfmnlRvik->extensions = {
        "h",
        "m",
        "mm"
    };

    lXTrCLSMfmnlRvik->lineComment = "//";
    lXTrCLSMfmnlRvik->blockCommentBegin = "/*";
    lXTrCLSMfmnlRvik->blockCommentEnd = "*/";
    lXTrCLSMfmnlRvik->stringDelimiters = {
        "\""
    };

    config->AddLanguage(lXTrCLSMfmnlRvik);

    std::shared_ptr<Language> ZzuZMEjQKsOfhbPq = std::make_shared<Language>();

    ZzuZMEjQKsOfhbPq->name = "YAML";
    ZzuZMEjQKsOfhbPq->extensions = {
        "yml",
        "yaml"
    };

    ZzuZMEjQKsOfhbPq->lineComment = "#";
    ZzuZMEjQKsOfhbPq->stringDelimiters = {
        "\"",
        "'"
    };

    config->AddLanguage(ZzuZMEjQKsOfhbPq);

    std::shared_ptr<Language> dYZmBBrgHRpRITqa = std::make_shared<Language>();

    dYZmBBrgHRpRITqa->name = "INI";
    dYZmBBrgHRpRITqa->extensions = {
        "ini"
    };

    dYZmBBrgHRpRITqa->lineComment = ";";

    config->AddLanguage(dYZmBBrgHRpRITqa);

    return config;
}